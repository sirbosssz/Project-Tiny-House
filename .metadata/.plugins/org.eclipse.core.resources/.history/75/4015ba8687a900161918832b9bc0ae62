package Screen;

import java.lang.reflect.Parameter;

import com.badlogic.gdx.ApplicationListener;
import Screen.createChar;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.InputMultiplexer;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.PolygonRegion;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.FreeTypeFontParameter;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.maps.MapLayer;
import com.badlogic.gdx.maps.MapObjects;
import com.badlogic.gdx.maps.objects.PolygonMapObject;
import com.badlogic.gdx.maps.objects.RectangleMapObject;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer;
import com.badlogic.gdx.math.Intersector;
import com.badlogic.gdx.math.Polygon;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Event;
import com.badlogic.gdx.scenes.scene2d.EventListener;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.actions.Actions;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.FloatArray;
import com.mygdx.game.PetGame;
import Character.InitAll;
import InputHandler.inputHandle;
import Manager.GameScreenManager.STATE;
import com.badlogic.gdx.graphics.g2d.PolygonRegion;
import Manager.Save;

public class MainGameScreen extends AbstractScreen implements Screen, ApplicationListener, InputProcessor{
	private TiledMap map;
	private IsometricTiledMapRenderer renderer;
	private OrthographicCamera camera, camera2;
	private Skin skin;
	private Stage stage;
	private Table backTable;
	private TextButtonStyle buttonStyle;
	private TextureAtlas buttonAtlas;
	private FreeTypeFontGenerator generator;
	private BitmapFont font;
	private Table table;
	private Table table2;
	private TextButton backbutton;
	private Rectangle rectbound;
	private Label tinyLabel;
	private LabelStyle style;
	
	public static float posx = 2800, posy = 500;//5000 2000
	public static float char_x= 2500, char_y = 200;//2500 200
	
	public static final int char_width = 700;
	public static final int char_height = 700;
	public static final float switch_time = 0.02f;
	
	int keepState, checkState = 0, camState= 0;
	float stateTime, timer;
	
	boolean stateLeft, stateRight, stateDown, stateUp, stateClick, first = true;
	
	SpriteBatch batch;
	Texture img;
	Sprite sprite;
	
	InitAll charCre = new InitAll();
	private MapLayer collisionObjectLayer;
	private MapObjects objects;
	private MapObjects mapObjects;
	private Object rectangleObjects;
	private RectangleMapObject rectangleObject;
	private Input rectangle;
	private Label tinyLabel2;
	private ShapeRenderer sr;
	//private float[] vertice = {1306, 7,2378, -919, 4131, 296, 2708 , 959};
	private float[] vertice = {1523, 118, 2065, -330, 4283, 7701, 2945, 1439};
	
	
	
	
	public MainGameScreen(final PetGame game){
		
		//this.game = game;
		super(game);
		stage = new Stage();
		float posx = Gdx.graphics.getWidth()/4, posy = Gdx.graphics.getHeight()/4;
	}

	@Override
	public void create() {
		camera = new OrthographicCamera();
		camera2 = new OrthographicCamera();
	}

	@Override
	public void show() {
		
		//debugRenderer = new PolygonRegionDebugRenderer();
		
		InputMultiplexer multiplexer = new InputMultiplexer();
		multiplexer.addProcessor(this);
		multiplexer.addProcessor(stage);
		
		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("ui/font/kenvector_future.ttf"));
		FreeTypeFontParameter parameter = new FreeTypeFontParameter();
		BitmapFont font = generator.generateFont(parameter);
		
		style = new LabelStyle(font, Color.BLACK);
		tinyLabel = new Label("TINY HOUSE", style);
		tinyLabel2 = new Label("TINY HOUSE", style);
		
		
		img = new Texture("picture/Background/game-background-images-2.png");
		
		//rectangleObject = new RectangleMapObject(char_x, char_y, char_width, char_height);
		

		
		buttonAtlas = new TextureAtlas(Gdx.files.internal("ui/Button/Buttonout/backbut.pack"));
		skin = new Skin(buttonAtlas);
		table = new Table(skin);
		table2 = new Table();
		backTable = new Table(skin);
		table.setBounds(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
		backTable.setBounds(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
		
		buttonStyle = new TextButtonStyle();
		buttonStyle.up = skin.getDrawable("back");
        buttonStyle.down = skin.getDrawable("back_press");
        
        buttonStyle.font = font;
        buttonStyle.fontColor = Color.WHITE;
        
        backbutton = new TextButton("", buttonStyle);
        backbutton.pad(20);
        
        table.setPosition(-555, 275);
        table.add(backbutton).width(200).height(80);
        
        table2.add(tinyLabel);
        table2.row();
        table2.add(tinyLabel2);
        table2.setVisible(false);
        
        
        stage.addActor(table);
        stage.addActor(table2);
        
        Gdx.input.setInputProcessor(multiplexer);
        
        map = new TmxMapLoader().load("Maps/gamplayMap.tmx");
		renderer = new IsometricTiledMapRenderer(map);
		renderer.setView((OrthographicCamera) stage.getCamera());
		camera = new OrthographicCamera();
		camera2 = new OrthographicCamera();
		camera.setToOrtho(false, Gdx.graphics.getWidth()*2.5f, Gdx.graphics.getHeight()*2.5f);
		camera2.setToOrtho(false, Gdx.graphics.getWidth()*2.5f, Gdx.graphics.getHeight()*2.5f);
		sr = new ShapeRenderer();
		charCre.createChar();
		
		
		
		
	}

	@Override
	public void render(float delta) {
		System.gc();
		
		Save.load();
		char_x = Save.gamed.getPositionX();
		char_y = Save.gamed.getPositionY();
		
		if(backbutton.isPressed()){
			/*createChar.menuState = 1;
			createChar.createState = 1;
			createChar.char_ta.setVisible(true);
			createChar.cre_char_Back_Ta.setVisible(false);
			createChar.cre_char_Back_Ta_Act.setVisible(true);
			createChar.backTable.setVisible(false);*/
			game.gsm.setScreen(STATE.MAIN_MENU);
			Save.gamed.setPosition(char_x, char_y);
			Save.save();
			
		}
		
		Gdx.gl.glClearColor(10, 10, 100, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		
		collcheck();
		
		if(Gdx.input.isKeyPressed(Keys.W) && Gdx.input.isKeyPressed(Keys.A)){
			timer -= Gdx.graphics.getDeltaTime(); 
			
			charCre.rightup[keepState].setBounds(char_x, char_y, char_width, char_height);
			//System.out.println(timer);
			if(Math.abs(timer) > switch_time){
				keepState += 1;
				//System.out.println(keepState);
				timer = 0.0f;
				if(keepState >= 15 ){keepState = 0;}
			}
			if(!collcheck()){
				char_y += 190.0f*delta;
				char_x -= 190.0f*delta;
			}
			else{
				char_y -= 200.0f*delta;
				char_x += 200.0f*delta;
			}
			
		}
		else if(Gdx.input.isKeyPressed(Keys.W) && Gdx.input.isKeyPressed(Keys.D)){
			timer -= Gdx.graphics.getDeltaTime(); 
			
			charCre.leftup[keepState].setBounds(char_x, char_y, char_width, char_height);
			if(Math.abs(timer) > switch_time){
				keepState += 1;
				//System.out.println(keepState);
				timer = 0.0f;
				if(keepState >= 15 ){keepState = 0;}
			}
			if(!collcheck()){
				char_y += 190.0f*delta;
				char_x += 190.0f*delta;
			}
			else{
				char_y -= 200.0f*delta;
				char_x -= 200.0f*delta;
			}
			
		}
		else if(Gdx.input.isKeyPressed(Keys.S) && Gdx.input.isKeyPressed(Keys.A)){
			timer -= Gdx.graphics.getDeltaTime(); 
			
			charCre.leftdown[keepState].setBounds(char_x, char_y, char_width, char_height);
			//System.out.println(timer);
			if(Math.abs(timer) > switch_time){
				keepState += 1;
				//System.out.println(keepState);
				timer = 0.0f;
				if(keepState >= 15 ){keepState = 0;}
			}
			if(!collcheck()){
				char_y -= 190.0f*delta;
				char_x -= 190.0f*delta;
			}
			else{
				char_y -= 200.0f*delta;
				char_x -= 200.0f*delta;
			}
			
		}
		else if(Gdx.input.isKeyPressed(Keys.S) && Gdx.input.isKeyPressed(Keys.D)){
			timer -= Gdx.graphics.getDeltaTime(); 
			charCre.rightdown[keepState].setBounds(char_x, char_y, char_width, char_height);
			//System.out.println(timer);
			if(Math.abs(timer) > switch_time){
				keepState += 1;
				//System.out.println(keepState);
				timer = 0.0f;
				if(keepState >= 15 ){keepState = 0;}
			}
			if(!collcheck()){
				char_y -= 190.0f*delta;
				char_x += 190.0f*delta;
			}
			else{
				char_y -= 200.0f*delta;
				char_x -= 200.0f*delta;
			}
			
		}
		/*else if(Gdx.input.isKeyPressed(Keys.A)){
			char_x -= 190.0f*delta; 
			timer -= Gdx.graphics.getDeltaTime(); 
			
			if(Math.abs(timer) > switch_time){
				keepState += 1;
				//System.out.println(keepState);
				timer = 0.0f;
				if(keepState >= 15 ){keepState = 0;}
			}
		}
		////////////////////////////////////////////////////////////////////////////////////
		else if(Gdx.input.isKeyPressed(Keys.D)){
			char_x += 190.0f*delta; 
			timer -= Gdx.graphics.getDeltaTime(); 
			//System.out.println(timer);
			if(Math.abs(timer) > switch_time){
				keepState += 1;
				//System.out.println(keepState);
				timer = 0.0f;
				if(keepState >= 15 ){keepState = 0;}
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		else if(Gdx.input.isKeyPressed(Keys.W)){
			char_y += 190.0f*delta;
			timer -= Gdx.graphics.getDeltaTime(); 
			//System.out.println(timer);
			if(Math.abs(timer) > switch_time){
				keepState += 1;
				//System.out.println(keepState);
				timer = 0.0f;
				if(keepState >= 15 ){keepState = 0;}
			}
			
		}
		//////////////////////////////////////////////////////////////////////////////
		else if(Gdx.input.isKeyPressed(Keys.S)){
			
		    timer -= Gdx.graphics.getDeltaTime(); 
			char_y -= 190.0f*delta;
			//System.out.println(timer);
			if(Math.abs(timer) > switch_time){
				keepState += 1;
				//System.out.println(keepState);
				timer = 0.0f;
				if(keepState >= 15 ){keepState = 0;}
			}
		}*/
		//stateTime+=delta;
		
		switch(camState){
		case 1 : posx -= 1150*delta;
				break;
		case 2 : posx += 1150*delta;
				break;
		case 3 : posy += 1150*delta;
				break;
		case 4 : posy -= 1150*delta;
				break;
		}
		
		renderer.render();
		renderer.setView(camera);
		
		game.batch.setProjectionMatrix(camera.combined);
		
		game.batch.begin();
		
		//game.batch.draw(img, 0, 0);
		/*sr.setProjectionMatrix(camera.combined);
		sr.setAutoShapeType(true);
		sr.begin(ShapeType.Filled);
		sr.setColor(0, 0 , 0, 0);
		sr.rect(1830, 875,420, 400);
		sr.end();*/
		//if(collcheck()){
			/*sr.setProjectionMatrix(camera2.combined);
			sr.setAutoShapeType(true);
			sr.begin(ShapeType.Filled);
			sr.rect(691, 913, 1000, 1000);
			sr.end();*/
		//}
		
		if(first == true){
			//rectbound.set(char_x, char_y, char_width, char_height);
			game.batch.draw(charCre.leftdown[0], char_x, char_y,char_width, char_height);
		}
		else if(stateLeft == true && stateDown == true){
			//rectbound.set(char_x, char_y, char_width, char_height);
			charCre.leftdown[keepState].setBounds(char_x, char_y, char_width, char_height);
			game.batch.draw(charCre.leftdown[keepState], char_x, char_y,char_width, char_height);
			//System.out.println(charCre.leftdown[keepState].getBoundingRectangle()+ " " + char_x/7 + " " + char_y*4);
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////
		else if(stateRight == true && stateDown == true){
			charCre.rightdown[keepState].setBounds(char_x, char_y, char_width, char_height);
			game.batch.draw(charCre.rightdown[keepState], char_x, char_y,char_width, char_height);
			//System.out.println(charCre.rightdown[keepState].getBoundingRectangle()+ " " + char_x/7 + " " + char_y*4);
			//System.out.println("ssssss");
		}
		
		else if(stateUp == true && stateLeft == true){
			
			charCre.leftup[keepState].setBounds(char_x, char_y, char_width, char_height);
			game.batch.draw(charCre.leftup[keepState], char_x, char_y,char_width, char_height);
		}
		
		else if(stateUp == true && stateRight == true){
			charCre.rightup[keepState].setBounds(char_x, char_y, char_width, char_height);
			game.batch.draw(charCre.rightup[keepState], char_x, char_y,char_width, char_height);
			//System.out.println(charCre.rightup[keepState].getBoundingRectangle()+ " " + char_x/7 + " " + char_y*4);
		}
		
		game.batch.end();
		
		stage.act();
		stage.draw();
		

		camera.position.set(posx, posy , 0f);
		camera.update();
		
		
	}
	public boolean collcheck(){
		
		MapLayer collisionObjectLayer = (MapLayer)map.getLayers().get("Object Layer 1");
		MapObjects objects = collisionObjectLayer.getObjects();
		Array<PolygonMapObject> rectangleObjects = objects.getByType(PolygonMapObject.class);

		for (PolygonMapObject rectangleObject : rectangleObjects){
			Polygon polygon =  rectangleObject.getPolygon();
			//Rectangle rectangle = rectangleObject.getRectangle();
			//polygon.setPosition(1523, 118);
			polygon.setOrigin(1523, 118);
			polygon.setVertices(vertice);
			polygon.getBoundingRectangle();
			
			
			System.out.println(polygon.getX() + " " + polygon.getY()+" "+charCre.rightup[keepState].getBoundingRectangle()+ " " + char_x + " " + char_y);
			/*if (charCre.leftup[keepState].getBoundingRectangle().overlaps(polygon)); {
				System.out.println("Collide");
				return true;
			}	
			return false;*/
			if(Intersector.intersectLinePolygon(new Vector2(char_x, char_y), new Vector2(char_x, char_y), polygon)){
				return true;
			}
			return false;
		}
		return false;
		
	}

	
	

	@Override
	public void hide() {
		
		//stage.dispose();
		//super.dispose();
	}

	
	@Override
	public void dispose(){
		super.dispose();
		//stage.dispose();
		//skin.dispose();
		//batch.dispose();
		//generator.dispose();
		//font.dispose();
		//renderer.dispose();
		map.dispose();
		
	}

	@Override
	public void render() {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {}
	
	@Override
	public boolean keyDown(int keycode) {
		
		if(Gdx.input.isKeyPressed(Keys.W) && Gdx.input.isKeyPressed(Keys.A)){
			stateClick = false; stateLeft = true; stateRight = false; stateUp = true; stateDown = false; first=false;
		}
		else if(Gdx.input.isKeyPressed(Keys.W) && Gdx.input.isKeyPressed(Keys.D)){
			stateClick = false; stateLeft = false;stateRight = true;stateUp = true;stateDown = false; first=false;
		}
		else if(Gdx.input.isKeyPressed(Keys.S) && Gdx.input.isKeyPressed(Keys.D)){
			stateClick = false; stateLeft = false; stateRight = true; stateUp = false; stateDown = true; first=false;
		}
		else if(Gdx.input.isKeyPressed(Keys.S) && Gdx.input.isKeyPressed(Keys.A)){
			stateClick = false; stateLeft = true;stateRight = false;stateUp = false;stateDown = true; first=false;
		}
		/*else if(Gdx.input.isKeyPressed(Keys.W)){
			stateClick = false;stateLeft = false;stateRight = false;stateUp = true;stateDown = false; first=false;
		}
		else if(Gdx.input.isKeyPressed(Keys.S)){
				stateClick = false;stateLeft = false;stateRight = false;stateUp = false;stateDown = true; first=false;
		}
		else if(Gdx.input.isKeyPressed(Keys.A)){
			stateClick = false;stateLeft = true;stateRight = false;stateUp = false;stateDown = false; first=false;
		}
		else if(Gdx.input.isKeyPressed(Keys.D)){
				stateClick = false;stateLeft = false;stateRight = true;stateUp = false;stateDown = false; first=false;
		}*/
		return true;
	}

	@Override
	public boolean keyUp(int keycode) {return false;}

	@Override
	public boolean keyTyped(char character) {return false;}

	@Override
	public boolean touchDown(int screenX, int screenY, int pointer, int button) {
		System.out.println(screenX + " " + screenY);
		return false;}

	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {return false;}

	@Override
	public boolean touchDragged(int screenX, int screenY, int pointer) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		//System.out.println(screenX + " " + screenY);
		
		if(screenX < 1260 && screenX > 15 && screenY > 15)
			camState = 0;
		
		if(screenX < 15)
			camState = 1;
		
		if(screenX > 1260)
			camState = 2;
		
		if(screenY < 15)
			camState = 3;
		
		if(screenY > 705)
			camState = 4;
		
		if(screenX> 259 && screenX < 417 && screenY > 163 && screenY < 438){
			/*table2.setPosition(screenX, 400);
			table2.setVisible(true);*/
			/*table2.addListener(new EventListener() {
				
				@Override
				public boolean handle(Event event) {
					if(event.toString() == "touchDown"){
						System.out.println("SS");
					}
					
					return false;
				}
			});*/
		}
		
		//System.out.println(camState);
		return false;
		}

	@Override
	public boolean scrolled(int amount) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void update(float delta) {
		// TODO Auto-generated method stub
		
	}
	
	
	

}
